------------------------------------------------------------------
-- altfp_matrix_mult parameterized megafunction
-- Generated with 'clearbox' loader - do not edit
------------------------------------------------------------------


-- Copyright (C) 1991-2013 Altera Corporation
--  Your use of Altera Corporation's design tools, logic functions 
--  and other software and tools, and its AMPP partner logic 
--  functions, and any output files from any of the foregoing 
--  (including device programming or simulation files), and any 
--  associated documentation or information are expressly subject 
--  to the terms and conditions of the Altera Program License 
--  Subscription Agreement, Altera MegaCore Function License 
--  Agreement, or other applicable license agreement, including, 
--  without limitation, that your use is for the sole purpose of 
--  programming logic devices manufactured by Altera and sold by 
--  Altera or its authorized distributors.  Please refer to the 
--  applicable agreement for further details.

--  Version 13.0 Build 156 04/24/2013

OPTIONS NAME_SUBSTITUTION = ON;

OPTIONS TREAT_DEFAULT_VALUE_AS_UNUSED = ON;

PARAMETERS
(
	BLOCKS = 0,
	CLUSTER = 16,
	COLUMNSAA = 0,
	COLUMNSBB = 0,
	ROWSAA = 0,
	VECTORSIZE = 0,
	WIDTH_EXP = 8,
	WIDTH_MAN = 23,
	CBXI_PARAMETER = "NOTHING"
);
FUNCTION @CBXI_PARAMETER (calcmatrix, enable, loadaa, loadbb, loaddata[WIDTH_EXP+WIDTH_MAN+1-1..0], loaddataimag[WIDTH_EXP+WIDTH_MAN+1-1..0], loaddatareal[WIDTH_EXP+WIDTH_MAN+1-1..0], reset, selbus, sysclk, vector_l_data[VEC_SIZE-1..0], vector_m_data[VEC_SIZE-1..0])
RETURNS (done, outdata[WIDTH_EXP+WIDTH_MAN+1-1..0], outdataimag[WIDTH_EXP+WIDTH_MAN+1-1..0], outdatareal[WIDTH_EXP+WIDTH_MAN+1-1..0], outvalid, ready, result[WIDTH_EXP+WIDTH_MAN+1-1..0]);


SUBDESIGN altfp_matrix_mult
(
	calcmatrix		:	INPUT = GND;
	done		:	OUTPUT;
	enable		:	INPUT = VCC;
	loadaa		:	INPUT = GND;
	loadbb		:	INPUT = GND;
	loaddata[WIDTH_EXP+WIDTH_MAN+1-1..0]		:	INPUT = GND;
	loaddataimag[WIDTH_EXP+WIDTH_MAN+1-1..0]		:	INPUT = GND;
	loaddatareal[WIDTH_EXP+WIDTH_MAN+1-1..0]		:	INPUT = GND;
	outdata[WIDTH_EXP+WIDTH_MAN+1-1..0]		:	OUTPUT;
	outdataimag[WIDTH_EXP+WIDTH_MAN+1-1..0]		:	OUTPUT;
	outdatareal[WIDTH_EXP+WIDTH_MAN+1-1..0]		:	OUTPUT;
	outvalid		:	OUTPUT;
	ready		:	OUTPUT;
	reset		:	INPUT = GND;
	result[WIDTH_EXP+WIDTH_MAN+1-1..0]		:	OUTPUT;
	selbus		:	INPUT = GND;
	sysclk		:	INPUT;
	vector_l_data[VEC_SIZE-1..0]		:	INPUT = GND;
	vector_m_data[VEC_SIZE-1..0]		:	INPUT = GND;
)
VARIABLE
	IF CBXI_PARAMETER != "NOTHING" GENERATE
		auto_generated : @CBXI_PARAMETER WITH ( CBXI_PARAMETER = "NOTHING" );
	END GENERATE;
BEGIN
	ASSERT (CBXI_PARAMETER != "NOTHING")
	REPORT "Valid clear box generator not found or Errors encountered during clear box generation"
	SEVERITY ERROR;
	IF (CBXI_PARAMETER != "NOTHING") GENERATE
		IF USED(calcmatrix) GENERATE
			auto_generated.calcmatrix = calcmatrix;
		END GENERATE;
		IF USED(done) GENERATE
			done = auto_generated.done;
		ELSE GENERATE
			done = GND;
		END GENERATE;
		IF USED(enable) GENERATE
			auto_generated.enable = enable;
		END GENERATE;
		IF USED(loadaa) GENERATE
			auto_generated.loadaa = loadaa;
		END GENERATE;
		IF USED(loadbb) GENERATE
			auto_generated.loadbb = loadbb;
		END GENERATE;
		IF USED(loaddata) GENERATE
			auto_generated.loaddata[] = loaddata[];
		END GENERATE;
		IF USED(loaddataimag) GENERATE
			auto_generated.loaddataimag[] = loaddataimag[];
		END GENERATE;
		IF USED(loaddatareal) GENERATE
			auto_generated.loaddatareal[] = loaddatareal[];
		END GENERATE;
		IF USED(outdata) GENERATE
			outdata[] = auto_generated.outdata[];
		ELSE GENERATE
			outdata[] = GND;
		END GENERATE;
		IF USED(outdataimag) GENERATE
			outdataimag[] = auto_generated.outdataimag[];
		ELSE GENERATE
			outdataimag[] = GND;
		END GENERATE;
		IF USED(outdatareal) GENERATE
			outdatareal[] = auto_generated.outdatareal[];
		ELSE GENERATE
			outdatareal[] = GND;
		END GENERATE;
		IF USED(outvalid) GENERATE
			outvalid = auto_generated.outvalid;
		ELSE GENERATE
			outvalid = GND;
		END GENERATE;
		IF USED(ready) GENERATE
			ready = auto_generated.ready;
		ELSE GENERATE
			ready = GND;
		END GENERATE;
		IF USED(reset) GENERATE
			auto_generated.reset = reset;
		END GENERATE;
		IF USED(result) GENERATE
			result[] = auto_generated.result[];
		ELSE GENERATE
			result[] = GND;
		END GENERATE;
		IF USED(selbus) GENERATE
			auto_generated.selbus = selbus;
		END GENERATE;
		IF USED(sysclk) GENERATE
			auto_generated.sysclk = sysclk;
		END GENERATE;
		IF USED(vector_l_data) GENERATE
			auto_generated.vector_l_data[] = vector_l_data[];
		END GENERATE;
		IF USED(vector_m_data) GENERATE
			auto_generated.vector_m_data[] = vector_m_data[];
		END GENERATE;
	END GENERATE;
END;
